/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab2;

import java.util.*;

public class Library {
    public boolean someLibraryMethod() {

        return true;
    }

    static int[] roll (int n) {
        Random rnd = new Random();
        int dice[] = new int[n];
        for (int i = 0; i < n; i++) {
            dice[i] = rnd.nextInt(6) + 1;
        }
        return dice;
    }

    static boolean containsDuplicates (int[] arr) {
        int currItem;
        for (int i = 0; i < arr.length; i++) {
            currItem = arr[i];
            for (int j = i+1; j < arr.length; j++) {
                if(arr[j] == currItem){
                    return false;
                }
            }
        }
        return true;
    }

    static double findAverage(int [] integers) {
        double sum = 0 ;
        for (int i = 0; i < integers.length; i++) {
            sum += integers[i];
        }

        return sum/integers.length;
    }

    int analyzeWeatherData (int[][] arr) {
        Set <Integer> dataWeather = new HashSet<>();
        int min = Integer.MAX_VALUE , max = Integer.MIN_VALUE ;
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                dataWeather.add(arr[i][j]);
                if(arr[i][j] < min) {
                    min = arr[i][j];
                }
                else if (arr[i][j] > max ) {
                    max = arr[i][j];
                }
            }
        }
        System.out.println("High: " + max);
        System.out.println("Low: " + min);
        int tempMin = min;
        for (int i = min; i <= max; i++) {
            if (!dataWeather.contains(i)){
                System.out.println("Never saw temperature: " + tempMin);
            }
            tempMin++;
        }

        return max;
    }

    //    Method to analyze given weather data as an array of arrays
    //    prints the minimum and maximum values
    //    prints the temperatures between minimum and maximum data that hasn't showed up
    static int[] lowestAverage(int[][] arr) {
        double avg = 0 , minAvg = Integer.MAX_VALUE;
        int minAvgArr[] = arr[0];
        for (int i = 0; i < arr.length; i++) {
            avg = 0;
            for (int j = 0 ; j < arr[i].length ; j++){
                avg+=arr[i][j];
            }
            avg /= arr[i].length;
            if(avg < minAvg) {
                minAvg = avg;
                minAvgArr = arr[i];
            }

        }
        return minAvgArr;
    }



}
